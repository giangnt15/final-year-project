# source: http://localhost:4466/bookstore/dev
# timestamp: Sun Feb 23 2020 11:37:16 GMT+0700 (Indochina Time)

type AggregateAuthor {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateBookCategory {
  count: Int!
}

type AggregateBookReview {
  count: Int!
}

type AggregateCollection {
  count: Int!
}

type AggregateDiscount {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePaymentMethod {
  count: Int!
}

type AggregatePublisher {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserAddress {
  count: Int!
}

type AggregateUserEvent {
  count: Int!
}

type Author implements Node {
  id: ID!
  realName: String
  pseudonym: String
  image: String
  description: String
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: ID
  realName: String
  pseudonym: String
  image: String
  description: String
  books: BookCreateManyWithoutAuthorsInput
}

input AuthorCreateManyWithoutBooksInput {
  create: [AuthorCreateWithoutBooksInput!]
  connect: [AuthorWhereUniqueInput!]
}

input AuthorCreateWithoutBooksInput {
  id: ID
  realName: String
  pseudonym: String
  image: String
  description: String
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  realName_ASC
  realName_DESC
  pseudonym_ASC
  pseudonym_DESC
  image_ASC
  image_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  realName: String
  pseudonym: String
  image: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AuthorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  realName: String

  """All values that are not equal to given value."""
  realName_not: String

  """All values that are contained in given list."""
  realName_in: [String!]

  """All values that are not contained in given list."""
  realName_not_in: [String!]

  """All values less than the given value."""
  realName_lt: String

  """All values less than or equal the given value."""
  realName_lte: String

  """All values greater than the given value."""
  realName_gt: String

  """All values greater than or equal the given value."""
  realName_gte: String

  """All values containing the given string."""
  realName_contains: String

  """All values not containing the given string."""
  realName_not_contains: String

  """All values starting with the given string."""
  realName_starts_with: String

  """All values not starting with the given string."""
  realName_not_starts_with: String

  """All values ending with the given string."""
  realName_ends_with: String

  """All values not ending with the given string."""
  realName_not_ends_with: String
  pseudonym: String

  """All values that are not equal to given value."""
  pseudonym_not: String

  """All values that are contained in given list."""
  pseudonym_in: [String!]

  """All values that are not contained in given list."""
  pseudonym_not_in: [String!]

  """All values less than the given value."""
  pseudonym_lt: String

  """All values less than or equal the given value."""
  pseudonym_lte: String

  """All values greater than the given value."""
  pseudonym_gt: String

  """All values greater than or equal the given value."""
  pseudonym_gte: String

  """All values containing the given string."""
  pseudonym_contains: String

  """All values not containing the given string."""
  pseudonym_not_contains: String

  """All values starting with the given string."""
  pseudonym_starts_with: String

  """All values not starting with the given string."""
  pseudonym_not_starts_with: String

  """All values ending with the given string."""
  pseudonym_ends_with: String

  """All values not ending with the given string."""
  pseudonym_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  realName: String
  pseudonym: String
  image: String
  description: String
  books: BookUpdateManyWithoutAuthorsInput
}

input AuthorUpdateManyDataInput {
  realName: String
  pseudonym: String
  image: String
  description: String
}

input AuthorUpdateManyMutationInput {
  realName: String
  pseudonym: String
  image: String
  description: String
}

input AuthorUpdateManyWithoutBooksInput {
  create: [AuthorCreateWithoutBooksInput!]
  connect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  disconnect: [AuthorWhereUniqueInput!]
  delete: [AuthorWhereUniqueInput!]
  update: [AuthorUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [AuthorUpdateManyWithWhereNestedInput!]
  deleteMany: [AuthorScalarWhereInput!]
  upsert: [AuthorUpsertWithWhereUniqueWithoutBooksInput!]
}

input AuthorUpdateManyWithWhereNestedInput {
  where: AuthorScalarWhereInput!
  data: AuthorUpdateManyDataInput!
}

input AuthorUpdateWithoutBooksDataInput {
  realName: String
  pseudonym: String
  image: String
  description: String
}

input AuthorUpdateWithWhereUniqueWithoutBooksInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutBooksDataInput!
}

input AuthorUpsertWithWhereUniqueWithoutBooksInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutBooksDataInput!
  create: AuthorCreateWithoutBooksInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  realName: String

  """All values that are not equal to given value."""
  realName_not: String

  """All values that are contained in given list."""
  realName_in: [String!]

  """All values that are not contained in given list."""
  realName_not_in: [String!]

  """All values less than the given value."""
  realName_lt: String

  """All values less than or equal the given value."""
  realName_lte: String

  """All values greater than the given value."""
  realName_gt: String

  """All values greater than or equal the given value."""
  realName_gte: String

  """All values containing the given string."""
  realName_contains: String

  """All values not containing the given string."""
  realName_not_contains: String

  """All values starting with the given string."""
  realName_starts_with: String

  """All values not starting with the given string."""
  realName_not_starts_with: String

  """All values ending with the given string."""
  realName_ends_with: String

  """All values not ending with the given string."""
  realName_not_ends_with: String
  pseudonym: String

  """All values that are not equal to given value."""
  pseudonym_not: String

  """All values that are contained in given list."""
  pseudonym_in: [String!]

  """All values that are not contained in given list."""
  pseudonym_not_in: [String!]

  """All values less than the given value."""
  pseudonym_lt: String

  """All values less than or equal the given value."""
  pseudonym_lte: String

  """All values greater than the given value."""
  pseudonym_gt: String

  """All values greater than or equal the given value."""
  pseudonym_gte: String

  """All values containing the given string."""
  pseudonym_contains: String

  """All values not containing the given string."""
  pseudonym_not_contains: String

  """All values starting with the given string."""
  pseudonym_starts_with: String

  """All values not starting with the given string."""
  pseudonym_not_starts_with: String

  """All values ending with the given string."""
  pseudonym_ends_with: String

  """All values not ending with the given string."""
  pseudonym_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  title: String!
  description: String
  categories(where: BookCategoryWhereInput, orderBy: BookCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookCategory!]
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author!]
  reviews(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookReview!]
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  collections(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Collection!]
  publisher: Publisher!
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookCategory implements Node {
  id: ID!
  name: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BookCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookCategoryEdge]!
  aggregate: AggregateBookCategory!
}

input BookCategoryCreateInput {
  id: ID
  name: String!
  books: BookCreateManyWithoutCategoriesInput
}

input BookCategoryCreateManyWithoutBooksInput {
  create: [BookCategoryCreateWithoutBooksInput!]
  connect: [BookCategoryWhereUniqueInput!]
}

input BookCategoryCreateWithoutBooksInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type BookCategoryEdge {
  """The item at the end of the edge."""
  node: BookCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookCategoryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookCategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookCategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookCategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookCategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BookCategorySubscriptionPayload {
  mutation: MutationType!
  node: BookCategory
  updatedFields: [String!]
  previousValues: BookCategoryPreviousValues
}

input BookCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookCategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookCategoryWhereInput
}

input BookCategoryUpdateInput {
  name: String
  books: BookUpdateManyWithoutCategoriesInput
}

input BookCategoryUpdateManyDataInput {
  name: String
}

input BookCategoryUpdateManyMutationInput {
  name: String
}

input BookCategoryUpdateManyWithoutBooksInput {
  create: [BookCategoryCreateWithoutBooksInput!]
  connect: [BookCategoryWhereUniqueInput!]
  set: [BookCategoryWhereUniqueInput!]
  disconnect: [BookCategoryWhereUniqueInput!]
  delete: [BookCategoryWhereUniqueInput!]
  update: [BookCategoryUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [BookCategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [BookCategoryScalarWhereInput!]
  upsert: [BookCategoryUpsertWithWhereUniqueWithoutBooksInput!]
}

input BookCategoryUpdateManyWithWhereNestedInput {
  where: BookCategoryScalarWhereInput!
  data: BookCategoryUpdateManyDataInput!
}

input BookCategoryUpdateWithoutBooksDataInput {
  name: String
}

input BookCategoryUpdateWithWhereUniqueWithoutBooksInput {
  where: BookCategoryWhereUniqueInput!
  data: BookCategoryUpdateWithoutBooksDataInput!
}

input BookCategoryUpsertWithWhereUniqueWithoutBooksInput {
  where: BookCategoryWhereUniqueInput!
  update: BookCategoryUpdateWithoutBooksDataInput!
  create: BookCategoryCreateWithoutBooksInput!
}

input BookCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [BookCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input BookCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  authors: AuthorCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  collections: CollectionCreateManyWithoutBooksInput
  publisher: PublisherCreateOneWithoutBooksInput!
  discounts: DiscountCreateManyWithoutAppliedToInput
}

input BookCreateManyWithoutAuthorsInput {
  create: [BookCreateWithoutAuthorsInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutCategoriesInput {
  create: [BookCreateWithoutCategoriesInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutCollectionsInput {
  create: [BookCreateWithoutCollectionsInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutDiscountsInput {
  create: [BookCreateWithoutDiscountsInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutPublisherInput {
  create: [BookCreateWithoutPublisherInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

input BookCreateOneWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutAuthorsInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  collections: CollectionCreateManyWithoutBooksInput
  publisher: PublisherCreateOneWithoutBooksInput!
  discounts: DiscountCreateManyWithoutAppliedToInput
}

input BookCreateWithoutCategoriesInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  authors: AuthorCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  collections: CollectionCreateManyWithoutBooksInput
  publisher: PublisherCreateOneWithoutBooksInput!
  discounts: DiscountCreateManyWithoutAppliedToInput
}

input BookCreateWithoutCollectionsInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  authors: AuthorCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  publisher: PublisherCreateOneWithoutBooksInput!
  discounts: DiscountCreateManyWithoutAppliedToInput
}

input BookCreateWithoutDiscountsInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  authors: AuthorCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  collections: CollectionCreateManyWithoutBooksInput
  publisher: PublisherCreateOneWithoutBooksInput!
}

input BookCreateWithoutPublisherInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  authors: AuthorCreateManyWithoutBooksInput
  reviews: BookReviewCreateManyWithoutBookInput
  collections: CollectionCreateManyWithoutBooksInput
  discounts: DiscountCreateManyWithoutAppliedToInput
}

input BookCreateWithoutReviewsInput {
  id: ID
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  categories: BookCategoryCreateManyWithoutBooksInput
  authors: AuthorCreateManyWithoutBooksInput
  collections: CollectionCreateManyWithoutBooksInput
  publisher: PublisherCreateOneWithoutBooksInput!
  discounts: DiscountCreateManyWithoutAppliedToInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookFormat {
  HardCover
  PaperBack
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  isbn_ASC
  isbn_DESC
  translator_ASC
  translator_DESC
  format_ASC
  format_DESC
  dimensions_ASC
  dimensions_DESC
  publishedDate_ASC
  publishedDate_DESC
  availableCopies_ASC
  availableCopies_DESC
  basePrice_ASC
  basePrice_DESC
  pages_ASC
  pages_DESC
  thumbnail_ASC
  thumbnail_DESC
  images_ASC
  images_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  description: String
  isbn: String!
  translator: String
  format: BookFormat!
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int!
  basePrice: Float!
  pages: Int
  thumbnail: String!
  images: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookReview implements Node {
  id: ID!
  reviewHeader: String
  reviewText: String
  rating: Int!
  author: User!
  book: Book!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BookReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookReviewEdge]!
  aggregate: AggregateBookReview!
}

input BookReviewCreateInput {
  id: ID
  reviewHeader: String
  reviewText: String
  rating: Int!
  author: UserCreateOneWithoutReviewsInput!
  book: BookCreateOneWithoutReviewsInput!
}

input BookReviewCreateManyWithoutAuthorInput {
  create: [BookReviewCreateWithoutAuthorInput!]
  connect: [BookReviewWhereUniqueInput!]
}

input BookReviewCreateManyWithoutBookInput {
  create: [BookReviewCreateWithoutBookInput!]
  connect: [BookReviewWhereUniqueInput!]
}

input BookReviewCreateWithoutAuthorInput {
  id: ID
  reviewHeader: String
  reviewText: String
  rating: Int!
  book: BookCreateOneWithoutReviewsInput!
}

input BookReviewCreateWithoutBookInput {
  id: ID
  reviewHeader: String
  reviewText: String
  rating: Int!
  author: UserCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type BookReviewEdge {
  """The item at the end of the edge."""
  node: BookReview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookReviewOrderByInput {
  id_ASC
  id_DESC
  reviewHeader_ASC
  reviewHeader_DESC
  reviewText_ASC
  reviewText_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookReviewPreviousValues {
  id: ID!
  reviewHeader: String
  reviewText: String
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reviewHeader: String

  """All values that are not equal to given value."""
  reviewHeader_not: String

  """All values that are contained in given list."""
  reviewHeader_in: [String!]

  """All values that are not contained in given list."""
  reviewHeader_not_in: [String!]

  """All values less than the given value."""
  reviewHeader_lt: String

  """All values less than or equal the given value."""
  reviewHeader_lte: String

  """All values greater than the given value."""
  reviewHeader_gt: String

  """All values greater than or equal the given value."""
  reviewHeader_gte: String

  """All values containing the given string."""
  reviewHeader_contains: String

  """All values not containing the given string."""
  reviewHeader_not_contains: String

  """All values starting with the given string."""
  reviewHeader_starts_with: String

  """All values not starting with the given string."""
  reviewHeader_not_starts_with: String

  """All values ending with the given string."""
  reviewHeader_ends_with: String

  """All values not ending with the given string."""
  reviewHeader_not_ends_with: String
  reviewText: String

  """All values that are not equal to given value."""
  reviewText_not: String

  """All values that are contained in given list."""
  reviewText_in: [String!]

  """All values that are not contained in given list."""
  reviewText_not_in: [String!]

  """All values less than the given value."""
  reviewText_lt: String

  """All values less than or equal the given value."""
  reviewText_lte: String

  """All values greater than the given value."""
  reviewText_gt: String

  """All values greater than or equal the given value."""
  reviewText_gte: String

  """All values containing the given string."""
  reviewText_contains: String

  """All values not containing the given string."""
  reviewText_not_contains: String

  """All values starting with the given string."""
  reviewText_starts_with: String

  """All values not starting with the given string."""
  reviewText_not_starts_with: String

  """All values ending with the given string."""
  reviewText_ends_with: String

  """All values not ending with the given string."""
  reviewText_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BookReviewSubscriptionPayload {
  mutation: MutationType!
  node: BookReview
  updatedFields: [String!]
  previousValues: BookReviewPreviousValues
}

input BookReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookReviewSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookReviewWhereInput
}

input BookReviewUpdateInput {
  reviewHeader: String
  reviewText: String
  rating: Int
  author: UserUpdateOneRequiredWithoutReviewsInput
  book: BookUpdateOneRequiredWithoutReviewsInput
}

input BookReviewUpdateManyDataInput {
  reviewHeader: String
  reviewText: String
  rating: Int
}

input BookReviewUpdateManyMutationInput {
  reviewHeader: String
  reviewText: String
  rating: Int
}

input BookReviewUpdateManyWithoutAuthorInput {
  create: [BookReviewCreateWithoutAuthorInput!]
  connect: [BookReviewWhereUniqueInput!]
  set: [BookReviewWhereUniqueInput!]
  disconnect: [BookReviewWhereUniqueInput!]
  delete: [BookReviewWhereUniqueInput!]
  update: [BookReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [BookReviewScalarWhereInput!]
  upsert: [BookReviewUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookReviewUpdateManyWithoutBookInput {
  create: [BookReviewCreateWithoutBookInput!]
  connect: [BookReviewWhereUniqueInput!]
  set: [BookReviewWhereUniqueInput!]
  disconnect: [BookReviewWhereUniqueInput!]
  delete: [BookReviewWhereUniqueInput!]
  update: [BookReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [BookReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [BookReviewScalarWhereInput!]
  upsert: [BookReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input BookReviewUpdateManyWithWhereNestedInput {
  where: BookReviewScalarWhereInput!
  data: BookReviewUpdateManyDataInput!
}

input BookReviewUpdateWithoutAuthorDataInput {
  reviewHeader: String
  reviewText: String
  rating: Int
  book: BookUpdateOneRequiredWithoutReviewsInput
}

input BookReviewUpdateWithoutBookDataInput {
  reviewHeader: String
  reviewText: String
  rating: Int
  author: UserUpdateOneRequiredWithoutReviewsInput
}

input BookReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: BookReviewWhereUniqueInput!
  data: BookReviewUpdateWithoutAuthorDataInput!
}

input BookReviewUpdateWithWhereUniqueWithoutBookInput {
  where: BookReviewWhereUniqueInput!
  data: BookReviewUpdateWithoutBookDataInput!
}

input BookReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: BookReviewWhereUniqueInput!
  update: BookReviewUpdateWithoutAuthorDataInput!
  create: BookReviewCreateWithoutAuthorInput!
}

input BookReviewUpsertWithWhereUniqueWithoutBookInput {
  where: BookReviewWhereUniqueInput!
  update: BookReviewUpdateWithoutBookDataInput!
  create: BookReviewCreateWithoutBookInput!
}

input BookReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [BookReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reviewHeader: String

  """All values that are not equal to given value."""
  reviewHeader_not: String

  """All values that are contained in given list."""
  reviewHeader_in: [String!]

  """All values that are not contained in given list."""
  reviewHeader_not_in: [String!]

  """All values less than the given value."""
  reviewHeader_lt: String

  """All values less than or equal the given value."""
  reviewHeader_lte: String

  """All values greater than the given value."""
  reviewHeader_gt: String

  """All values greater than or equal the given value."""
  reviewHeader_gte: String

  """All values containing the given string."""
  reviewHeader_contains: String

  """All values not containing the given string."""
  reviewHeader_not_contains: String

  """All values starting with the given string."""
  reviewHeader_starts_with: String

  """All values not starting with the given string."""
  reviewHeader_not_starts_with: String

  """All values ending with the given string."""
  reviewHeader_ends_with: String

  """All values not ending with the given string."""
  reviewHeader_not_ends_with: String
  reviewText: String

  """All values that are not equal to given value."""
  reviewText_not: String

  """All values that are contained in given list."""
  reviewText_in: [String!]

  """All values that are not contained in given list."""
  reviewText_not_in: [String!]

  """All values less than the given value."""
  reviewText_lt: String

  """All values less than or equal the given value."""
  reviewText_lte: String

  """All values greater than the given value."""
  reviewText_gt: String

  """All values greater than or equal the given value."""
  reviewText_gte: String

  """All values containing the given string."""
  reviewText_contains: String

  """All values not containing the given string."""
  reviewText_not_contains: String

  """All values starting with the given string."""
  reviewText_starts_with: String

  """All values not starting with the given string."""
  reviewText_not_starts_with: String

  """All values ending with the given string."""
  reviewText_ends_with: String

  """All values not ending with the given string."""
  reviewText_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  book: BookWhereInput
}

input BookReviewWhereUniqueInput {
  id: ID
}

input BookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isbn: String

  """All values that are not equal to given value."""
  isbn_not: String

  """All values that are contained in given list."""
  isbn_in: [String!]

  """All values that are not contained in given list."""
  isbn_not_in: [String!]

  """All values less than the given value."""
  isbn_lt: String

  """All values less than or equal the given value."""
  isbn_lte: String

  """All values greater than the given value."""
  isbn_gt: String

  """All values greater than or equal the given value."""
  isbn_gte: String

  """All values containing the given string."""
  isbn_contains: String

  """All values not containing the given string."""
  isbn_not_contains: String

  """All values starting with the given string."""
  isbn_starts_with: String

  """All values not starting with the given string."""
  isbn_not_starts_with: String

  """All values ending with the given string."""
  isbn_ends_with: String

  """All values not ending with the given string."""
  isbn_not_ends_with: String
  translator: String

  """All values that are not equal to given value."""
  translator_not: String

  """All values that are contained in given list."""
  translator_in: [String!]

  """All values that are not contained in given list."""
  translator_not_in: [String!]

  """All values less than the given value."""
  translator_lt: String

  """All values less than or equal the given value."""
  translator_lte: String

  """All values greater than the given value."""
  translator_gt: String

  """All values greater than or equal the given value."""
  translator_gte: String

  """All values containing the given string."""
  translator_contains: String

  """All values not containing the given string."""
  translator_not_contains: String

  """All values starting with the given string."""
  translator_starts_with: String

  """All values not starting with the given string."""
  translator_not_starts_with: String

  """All values ending with the given string."""
  translator_ends_with: String

  """All values not ending with the given string."""
  translator_not_ends_with: String
  format: BookFormat

  """All values that are not equal to given value."""
  format_not: BookFormat

  """All values that are contained in given list."""
  format_in: [BookFormat!]

  """All values that are not contained in given list."""
  format_not_in: [BookFormat!]
  dimensions: String

  """All values that are not equal to given value."""
  dimensions_not: String

  """All values that are contained in given list."""
  dimensions_in: [String!]

  """All values that are not contained in given list."""
  dimensions_not_in: [String!]

  """All values less than the given value."""
  dimensions_lt: String

  """All values less than or equal the given value."""
  dimensions_lte: String

  """All values greater than the given value."""
  dimensions_gt: String

  """All values greater than or equal the given value."""
  dimensions_gte: String

  """All values containing the given string."""
  dimensions_contains: String

  """All values not containing the given string."""
  dimensions_not_contains: String

  """All values starting with the given string."""
  dimensions_starts_with: String

  """All values not starting with the given string."""
  dimensions_not_starts_with: String

  """All values ending with the given string."""
  dimensions_ends_with: String

  """All values not ending with the given string."""
  dimensions_not_ends_with: String
  publishedDate: DateTime

  """All values that are not equal to given value."""
  publishedDate_not: DateTime

  """All values that are contained in given list."""
  publishedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishedDate_lt: DateTime

  """All values less than or equal the given value."""
  publishedDate_lte: DateTime

  """All values greater than the given value."""
  publishedDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishedDate_gte: DateTime
  availableCopies: Int

  """All values that are not equal to given value."""
  availableCopies_not: Int

  """All values that are contained in given list."""
  availableCopies_in: [Int!]

  """All values that are not contained in given list."""
  availableCopies_not_in: [Int!]

  """All values less than the given value."""
  availableCopies_lt: Int

  """All values less than or equal the given value."""
  availableCopies_lte: Int

  """All values greater than the given value."""
  availableCopies_gt: Int

  """All values greater than or equal the given value."""
  availableCopies_gte: Int
  basePrice: Float

  """All values that are not equal to given value."""
  basePrice_not: Float

  """All values that are contained in given list."""
  basePrice_in: [Float!]

  """All values that are not contained in given list."""
  basePrice_not_in: [Float!]

  """All values less than the given value."""
  basePrice_lt: Float

  """All values less than or equal the given value."""
  basePrice_lte: Float

  """All values greater than the given value."""
  basePrice_gt: Float

  """All values greater than or equal the given value."""
  basePrice_gte: Float
  pages: Int

  """All values that are not equal to given value."""
  pages_not: Int

  """All values that are contained in given list."""
  pages_in: [Int!]

  """All values that are not contained in given list."""
  pages_not_in: [Int!]

  """All values less than the given value."""
  pages_lt: Int

  """All values less than or equal the given value."""
  pages_lte: Int

  """All values greater than the given value."""
  pages_gt: Int

  """All values greater than or equal the given value."""
  pages_gte: Int
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  images: String

  """All values that are not equal to given value."""
  images_not: String

  """All values that are contained in given list."""
  images_in: [String!]

  """All values that are not contained in given list."""
  images_not_in: [String!]

  """All values less than the given value."""
  images_lt: String

  """All values less than or equal the given value."""
  images_lte: String

  """All values greater than the given value."""
  images_gt: String

  """All values greater than or equal the given value."""
  images_gte: String

  """All values containing the given string."""
  images_contains: String

  """All values not containing the given string."""
  images_not_contains: String

  """All values starting with the given string."""
  images_starts_with: String

  """All values not starting with the given string."""
  images_not_starts_with: String

  """All values ending with the given string."""
  images_ends_with: String

  """All values not ending with the given string."""
  images_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateManyDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
}

input BookUpdateManyMutationInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
}

input BookUpdateManyWithoutAuthorsInput {
  create: [BookCreateWithoutAuthorsInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorsInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorsInput!]
}

input BookUpdateManyWithoutCategoriesInput {
  create: [BookCreateWithoutCategoriesInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input BookUpdateManyWithoutCollectionsInput {
  create: [BookCreateWithoutCollectionsInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutCollectionsInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutCollectionsInput!]
}

input BookUpdateManyWithoutDiscountsInput {
  create: [BookCreateWithoutDiscountsInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutDiscountsInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutDiscountsInput!]
}

input BookUpdateManyWithoutPublisherInput {
  create: [BookCreateWithoutPublisherInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutPublisherInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutPublisherInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateOneRequiredInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
  update: BookUpdateDataInput
  upsert: BookUpsertNestedInput
}

input BookUpdateOneRequiredWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput
  connect: BookWhereUniqueInput
  update: BookUpdateWithoutReviewsDataInput
  upsert: BookUpsertWithoutReviewsInput
}

input BookUpdateWithoutAuthorsDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateWithoutCategoriesDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateWithoutCollectionsDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateWithoutDiscountsDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
}

input BookUpdateWithoutPublisherDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  reviews: BookReviewUpdateManyWithoutBookInput
  collections: CollectionUpdateManyWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateWithoutReviewsDataInput {
  title: String
  description: String
  isbn: String
  translator: String
  format: BookFormat
  dimensions: String
  publishedDate: DateTime
  availableCopies: Int
  basePrice: Float
  pages: Int
  thumbnail: String
  images: String
  categories: BookCategoryUpdateManyWithoutBooksInput
  authors: AuthorUpdateManyWithoutBooksInput
  collections: CollectionUpdateManyWithoutBooksInput
  publisher: PublisherUpdateOneRequiredWithoutBooksInput
  discounts: DiscountUpdateManyWithoutAppliedToInput
}

input BookUpdateWithWhereUniqueWithoutAuthorsInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutAuthorsDataInput!
}

input BookUpdateWithWhereUniqueWithoutCategoriesInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutCategoriesDataInput!
}

input BookUpdateWithWhereUniqueWithoutCollectionsInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutCollectionsDataInput!
}

input BookUpdateWithWhereUniqueWithoutDiscountsInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutDiscountsDataInput!
}

input BookUpdateWithWhereUniqueWithoutPublisherInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutPublisherDataInput!
}

input BookUpsertNestedInput {
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookUpsertWithoutReviewsInput {
  update: BookUpdateWithoutReviewsDataInput!
  create: BookCreateWithoutReviewsInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorsInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutAuthorsDataInput!
  create: BookCreateWithoutAuthorsInput!
}

input BookUpsertWithWhereUniqueWithoutCategoriesInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutCategoriesDataInput!
  create: BookCreateWithoutCategoriesInput!
}

input BookUpsertWithWhereUniqueWithoutCollectionsInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutCollectionsDataInput!
  create: BookCreateWithoutCollectionsInput!
}

input BookUpsertWithWhereUniqueWithoutDiscountsInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutDiscountsDataInput!
  create: BookCreateWithoutDiscountsInput!
}

input BookUpsertWithWhereUniqueWithoutPublisherInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutPublisherDataInput!
  create: BookCreateWithoutPublisherInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isbn: String

  """All values that are not equal to given value."""
  isbn_not: String

  """All values that are contained in given list."""
  isbn_in: [String!]

  """All values that are not contained in given list."""
  isbn_not_in: [String!]

  """All values less than the given value."""
  isbn_lt: String

  """All values less than or equal the given value."""
  isbn_lte: String

  """All values greater than the given value."""
  isbn_gt: String

  """All values greater than or equal the given value."""
  isbn_gte: String

  """All values containing the given string."""
  isbn_contains: String

  """All values not containing the given string."""
  isbn_not_contains: String

  """All values starting with the given string."""
  isbn_starts_with: String

  """All values not starting with the given string."""
  isbn_not_starts_with: String

  """All values ending with the given string."""
  isbn_ends_with: String

  """All values not ending with the given string."""
  isbn_not_ends_with: String
  translator: String

  """All values that are not equal to given value."""
  translator_not: String

  """All values that are contained in given list."""
  translator_in: [String!]

  """All values that are not contained in given list."""
  translator_not_in: [String!]

  """All values less than the given value."""
  translator_lt: String

  """All values less than or equal the given value."""
  translator_lte: String

  """All values greater than the given value."""
  translator_gt: String

  """All values greater than or equal the given value."""
  translator_gte: String

  """All values containing the given string."""
  translator_contains: String

  """All values not containing the given string."""
  translator_not_contains: String

  """All values starting with the given string."""
  translator_starts_with: String

  """All values not starting with the given string."""
  translator_not_starts_with: String

  """All values ending with the given string."""
  translator_ends_with: String

  """All values not ending with the given string."""
  translator_not_ends_with: String
  format: BookFormat

  """All values that are not equal to given value."""
  format_not: BookFormat

  """All values that are contained in given list."""
  format_in: [BookFormat!]

  """All values that are not contained in given list."""
  format_not_in: [BookFormat!]
  dimensions: String

  """All values that are not equal to given value."""
  dimensions_not: String

  """All values that are contained in given list."""
  dimensions_in: [String!]

  """All values that are not contained in given list."""
  dimensions_not_in: [String!]

  """All values less than the given value."""
  dimensions_lt: String

  """All values less than or equal the given value."""
  dimensions_lte: String

  """All values greater than the given value."""
  dimensions_gt: String

  """All values greater than or equal the given value."""
  dimensions_gte: String

  """All values containing the given string."""
  dimensions_contains: String

  """All values not containing the given string."""
  dimensions_not_contains: String

  """All values starting with the given string."""
  dimensions_starts_with: String

  """All values not starting with the given string."""
  dimensions_not_starts_with: String

  """All values ending with the given string."""
  dimensions_ends_with: String

  """All values not ending with the given string."""
  dimensions_not_ends_with: String
  publishedDate: DateTime

  """All values that are not equal to given value."""
  publishedDate_not: DateTime

  """All values that are contained in given list."""
  publishedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishedDate_lt: DateTime

  """All values less than or equal the given value."""
  publishedDate_lte: DateTime

  """All values greater than the given value."""
  publishedDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishedDate_gte: DateTime
  availableCopies: Int

  """All values that are not equal to given value."""
  availableCopies_not: Int

  """All values that are contained in given list."""
  availableCopies_in: [Int!]

  """All values that are not contained in given list."""
  availableCopies_not_in: [Int!]

  """All values less than the given value."""
  availableCopies_lt: Int

  """All values less than or equal the given value."""
  availableCopies_lte: Int

  """All values greater than the given value."""
  availableCopies_gt: Int

  """All values greater than or equal the given value."""
  availableCopies_gte: Int
  basePrice: Float

  """All values that are not equal to given value."""
  basePrice_not: Float

  """All values that are contained in given list."""
  basePrice_in: [Float!]

  """All values that are not contained in given list."""
  basePrice_not_in: [Float!]

  """All values less than the given value."""
  basePrice_lt: Float

  """All values less than or equal the given value."""
  basePrice_lte: Float

  """All values greater than the given value."""
  basePrice_gt: Float

  """All values greater than or equal the given value."""
  basePrice_gte: Float
  pages: Int

  """All values that are not equal to given value."""
  pages_not: Int

  """All values that are contained in given list."""
  pages_in: [Int!]

  """All values that are not contained in given list."""
  pages_not_in: [Int!]

  """All values less than the given value."""
  pages_lt: Int

  """All values less than or equal the given value."""
  pages_lte: Int

  """All values greater than the given value."""
  pages_gt: Int

  """All values greater than or equal the given value."""
  pages_gte: Int
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  images: String

  """All values that are not equal to given value."""
  images_not: String

  """All values that are contained in given list."""
  images_in: [String!]

  """All values that are not contained in given list."""
  images_not_in: [String!]

  """All values less than the given value."""
  images_lt: String

  """All values less than or equal the given value."""
  images_lte: String

  """All values greater than the given value."""
  images_gt: String

  """All values greater than or equal the given value."""
  images_gte: String

  """All values containing the given string."""
  images_contains: String

  """All values not containing the given string."""
  images_not_contains: String

  """All values starting with the given string."""
  images_starts_with: String

  """All values not starting with the given string."""
  images_not_starts_with: String

  """All values ending with the given string."""
  images_ends_with: String

  """All values not ending with the given string."""
  images_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  categories_every: BookCategoryWhereInput
  categories_some: BookCategoryWhereInput
  categories_none: BookCategoryWhereInput
  authors_every: AuthorWhereInput
  authors_some: AuthorWhereInput
  authors_none: AuthorWhereInput
  reviews_every: BookReviewWhereInput
  reviews_some: BookReviewWhereInput
  reviews_none: BookReviewWhereInput
  collections_every: CollectionWhereInput
  collections_some: CollectionWhereInput
  collections_none: CollectionWhereInput
  publisher: PublisherWhereInput
  discounts_every: DiscountWhereInput
  discounts_some: DiscountWhereInput
  discounts_none: DiscountWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

type Collection implements Node {
  id: ID!
  collectionName: String!
  description: String
  thumbnail: String!
  cover: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CollectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollectionEdge]!
  aggregate: AggregateCollection!
}

input CollectionCreateInput {
  id: ID
  collectionName: String!
  description: String
  thumbnail: String!
  cover: String!
  books: BookCreateManyWithoutCollectionsInput
}

input CollectionCreateManyWithoutBooksInput {
  create: [CollectionCreateWithoutBooksInput!]
  connect: [CollectionWhereUniqueInput!]
}

input CollectionCreateWithoutBooksInput {
  id: ID
  collectionName: String!
  description: String
  thumbnail: String!
  cover: String!
}

"""An edge in a connection."""
type CollectionEdge {
  """The item at the end of the edge."""
  node: Collection!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CollectionOrderByInput {
  id_ASC
  id_DESC
  collectionName_ASC
  collectionName_DESC
  description_ASC
  description_DESC
  thumbnail_ASC
  thumbnail_DESC
  cover_ASC
  cover_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CollectionPreviousValues {
  id: ID!
  collectionName: String!
  description: String
  thumbnail: String!
  cover: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CollectionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CollectionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CollectionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CollectionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  collectionName: String

  """All values that are not equal to given value."""
  collectionName_not: String

  """All values that are contained in given list."""
  collectionName_in: [String!]

  """All values that are not contained in given list."""
  collectionName_not_in: [String!]

  """All values less than the given value."""
  collectionName_lt: String

  """All values less than or equal the given value."""
  collectionName_lte: String

  """All values greater than the given value."""
  collectionName_gt: String

  """All values greater than or equal the given value."""
  collectionName_gte: String

  """All values containing the given string."""
  collectionName_contains: String

  """All values not containing the given string."""
  collectionName_not_contains: String

  """All values starting with the given string."""
  collectionName_starts_with: String

  """All values not starting with the given string."""
  collectionName_not_starts_with: String

  """All values ending with the given string."""
  collectionName_ends_with: String

  """All values not ending with the given string."""
  collectionName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  cover: String

  """All values that are not equal to given value."""
  cover_not: String

  """All values that are contained in given list."""
  cover_in: [String!]

  """All values that are not contained in given list."""
  cover_not_in: [String!]

  """All values less than the given value."""
  cover_lt: String

  """All values less than or equal the given value."""
  cover_lte: String

  """All values greater than the given value."""
  cover_gt: String

  """All values greater than or equal the given value."""
  cover_gte: String

  """All values containing the given string."""
  cover_contains: String

  """All values not containing the given string."""
  cover_not_contains: String

  """All values starting with the given string."""
  cover_starts_with: String

  """All values not starting with the given string."""
  cover_not_starts_with: String

  """All values ending with the given string."""
  cover_ends_with: String

  """All values not ending with the given string."""
  cover_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CollectionSubscriptionPayload {
  mutation: MutationType!
  node: Collection
  updatedFields: [String!]
  previousValues: CollectionPreviousValues
}

input CollectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CollectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CollectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CollectionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CollectionWhereInput
}

input CollectionUpdateInput {
  collectionName: String
  description: String
  thumbnail: String
  cover: String
  books: BookUpdateManyWithoutCollectionsInput
}

input CollectionUpdateManyDataInput {
  collectionName: String
  description: String
  thumbnail: String
  cover: String
}

input CollectionUpdateManyMutationInput {
  collectionName: String
  description: String
  thumbnail: String
  cover: String
}

input CollectionUpdateManyWithoutBooksInput {
  create: [CollectionCreateWithoutBooksInput!]
  connect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  disconnect: [CollectionWhereUniqueInput!]
  delete: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [CollectionUpdateManyWithWhereNestedInput!]
  deleteMany: [CollectionScalarWhereInput!]
  upsert: [CollectionUpsertWithWhereUniqueWithoutBooksInput!]
}

input CollectionUpdateManyWithWhereNestedInput {
  where: CollectionScalarWhereInput!
  data: CollectionUpdateManyDataInput!
}

input CollectionUpdateWithoutBooksDataInput {
  collectionName: String
  description: String
  thumbnail: String
  cover: String
}

input CollectionUpdateWithWhereUniqueWithoutBooksInput {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateWithoutBooksDataInput!
}

input CollectionUpsertWithWhereUniqueWithoutBooksInput {
  where: CollectionWhereUniqueInput!
  update: CollectionUpdateWithoutBooksDataInput!
  create: CollectionCreateWithoutBooksInput!
}

input CollectionWhereInput {
  """Logical AND on all given filters."""
  AND: [CollectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CollectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CollectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  collectionName: String

  """All values that are not equal to given value."""
  collectionName_not: String

  """All values that are contained in given list."""
  collectionName_in: [String!]

  """All values that are not contained in given list."""
  collectionName_not_in: [String!]

  """All values less than the given value."""
  collectionName_lt: String

  """All values less than or equal the given value."""
  collectionName_lte: String

  """All values greater than the given value."""
  collectionName_gt: String

  """All values greater than or equal the given value."""
  collectionName_gte: String

  """All values containing the given string."""
  collectionName_contains: String

  """All values not containing the given string."""
  collectionName_not_contains: String

  """All values starting with the given string."""
  collectionName_starts_with: String

  """All values not starting with the given string."""
  collectionName_not_starts_with: String

  """All values ending with the given string."""
  collectionName_ends_with: String

  """All values not ending with the given string."""
  collectionName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  cover: String

  """All values that are not equal to given value."""
  cover_not: String

  """All values that are contained in given list."""
  cover_in: [String!]

  """All values that are not contained in given list."""
  cover_not_in: [String!]

  """All values less than the given value."""
  cover_lt: String

  """All values less than or equal the given value."""
  cover_lte: String

  """All values greater than the given value."""
  cover_gt: String

  """All values greater than or equal the given value."""
  cover_gte: String

  """All values containing the given string."""
  cover_contains: String

  """All values not containing the given string."""
  cover_not_contains: String

  """All values starting with the given string."""
  cover_starts_with: String

  """All values not starting with the given string."""
  cover_not_starts_with: String

  """All values ending with the given string."""
  cover_ends_with: String

  """All values not ending with the given string."""
  cover_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input CollectionWhereUniqueInput {
  id: ID
}

scalar DateTime

type Discount implements Node {
  id: ID!
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
  appliedTo(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DiscountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiscountEdge]!
  aggregate: AggregateDiscount!
}

input DiscountCreateInput {
  id: ID
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
  appliedTo: BookCreateManyWithoutDiscountsInput
}

input DiscountCreateManyWithoutAppliedToInput {
  create: [DiscountCreateWithoutAppliedToInput!]
  connect: [DiscountWhereUniqueInput!]
}

input DiscountCreateWithoutAppliedToInput {
  id: ID
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
}

"""An edge in a connection."""
type DiscountEdge {
  """The item at the end of the edge."""
  node: Discount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiscountOrderByInput {
  id_ASC
  id_DESC
  reason_ASC
  reason_DESC
  discountRate_ASC
  discountRate_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiscountPreviousValues {
  id: ID!
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DiscountScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  discountRate: Float

  """All values that are not equal to given value."""
  discountRate_not: Float

  """All values that are contained in given list."""
  discountRate_in: [Float!]

  """All values that are not contained in given list."""
  discountRate_not_in: [Float!]

  """All values less than the given value."""
  discountRate_lt: Float

  """All values less than or equal the given value."""
  discountRate_lte: Float

  """All values greater than the given value."""
  discountRate_gt: Float

  """All values greater than or equal the given value."""
  discountRate_gte: Float
  from: DateTime

  """All values that are not equal to given value."""
  from_not: DateTime

  """All values that are contained in given list."""
  from_in: [DateTime!]

  """All values that are not contained in given list."""
  from_not_in: [DateTime!]

  """All values less than the given value."""
  from_lt: DateTime

  """All values less than or equal the given value."""
  from_lte: DateTime

  """All values greater than the given value."""
  from_gt: DateTime

  """All values greater than or equal the given value."""
  from_gte: DateTime
  to: DateTime

  """All values that are not equal to given value."""
  to_not: DateTime

  """All values that are contained in given list."""
  to_in: [DateTime!]

  """All values that are not contained in given list."""
  to_not_in: [DateTime!]

  """All values less than the given value."""
  to_lt: DateTime

  """All values less than or equal the given value."""
  to_lte: DateTime

  """All values greater than the given value."""
  to_gt: DateTime

  """All values greater than or equal the given value."""
  to_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DiscountSubscriptionPayload {
  mutation: MutationType!
  node: Discount
  updatedFields: [String!]
  previousValues: DiscountPreviousValues
}

input DiscountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscountWhereInput
}

input DiscountUpdateInput {
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
  appliedTo: BookUpdateManyWithoutDiscountsInput
}

input DiscountUpdateManyDataInput {
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
}

input DiscountUpdateManyMutationInput {
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
}

input DiscountUpdateManyWithoutAppliedToInput {
  create: [DiscountCreateWithoutAppliedToInput!]
  connect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  disconnect: [DiscountWhereUniqueInput!]
  delete: [DiscountWhereUniqueInput!]
  update: [DiscountUpdateWithWhereUniqueWithoutAppliedToInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
  deleteMany: [DiscountScalarWhereInput!]
  upsert: [DiscountUpsertWithWhereUniqueWithoutAppliedToInput!]
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountUpdateWithoutAppliedToDataInput {
  reason: String
  discountRate: Float
  from: DateTime
  to: DateTime
}

input DiscountUpdateWithWhereUniqueWithoutAppliedToInput {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateWithoutAppliedToDataInput!
}

input DiscountUpsertWithWhereUniqueWithoutAppliedToInput {
  where: DiscountWhereUniqueInput!
  update: DiscountUpdateWithoutAppliedToDataInput!
  create: DiscountCreateWithoutAppliedToInput!
}

input DiscountWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  reason: String

  """All values that are not equal to given value."""
  reason_not: String

  """All values that are contained in given list."""
  reason_in: [String!]

  """All values that are not contained in given list."""
  reason_not_in: [String!]

  """All values less than the given value."""
  reason_lt: String

  """All values less than or equal the given value."""
  reason_lte: String

  """All values greater than the given value."""
  reason_gt: String

  """All values greater than or equal the given value."""
  reason_gte: String

  """All values containing the given string."""
  reason_contains: String

  """All values not containing the given string."""
  reason_not_contains: String

  """All values starting with the given string."""
  reason_starts_with: String

  """All values not starting with the given string."""
  reason_not_starts_with: String

  """All values ending with the given string."""
  reason_ends_with: String

  """All values not ending with the given string."""
  reason_not_ends_with: String
  discountRate: Float

  """All values that are not equal to given value."""
  discountRate_not: Float

  """All values that are contained in given list."""
  discountRate_in: [Float!]

  """All values that are not contained in given list."""
  discountRate_not_in: [Float!]

  """All values less than the given value."""
  discountRate_lt: Float

  """All values less than or equal the given value."""
  discountRate_lte: Float

  """All values greater than the given value."""
  discountRate_gt: Float

  """All values greater than or equal the given value."""
  discountRate_gte: Float
  from: DateTime

  """All values that are not equal to given value."""
  from_not: DateTime

  """All values that are contained in given list."""
  from_in: [DateTime!]

  """All values that are not contained in given list."""
  from_not_in: [DateTime!]

  """All values less than the given value."""
  from_lt: DateTime

  """All values less than or equal the given value."""
  from_lte: DateTime

  """All values greater than the given value."""
  from_gt: DateTime

  """All values greater than or equal the given value."""
  from_gte: DateTime
  to: DateTime

  """All values that are not equal to given value."""
  to_not: DateTime

  """All values that are contained in given list."""
  to_in: [DateTime!]

  """All values that are not contained in given list."""
  to_not_in: [DateTime!]

  """All values less than the given value."""
  to_lt: DateTime

  """All values less than or equal the given value."""
  to_lte: DateTime

  """All values greater than the given value."""
  to_gt: DateTime

  """All values greater than or equal the given value."""
  to_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  appliedTo_every: BookWhereInput
  appliedTo_some: BookWhereInput
  appliedTo_none: BookWhereInput
}

input DiscountWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createCollection(data: CollectionCreateInput!): Collection!
  createOrder(data: OrderCreateInput!): Order!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createUserEvent(data: UserEventCreateInput!): UserEvent!
  createBookReview(data: BookReviewCreateInput!): BookReview!
  createBookCategory(data: BookCategoryCreateInput!): BookCategory!
  createDiscount(data: DiscountCreateInput!): Discount!
  createPublisher(data: PublisherCreateInput!): Publisher!
  createAuthor(data: AuthorCreateInput!): Author!
  createBook(data: BookCreateInput!): Book!
  createUserAddress(data: UserAddressCreateInput!): UserAddress!
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCollection(data: CollectionUpdateInput!, where: CollectionWhereUniqueInput!): Collection
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateUserEvent(data: UserEventUpdateInput!, where: UserEventWhereUniqueInput!): UserEvent
  updateBookReview(data: BookReviewUpdateInput!, where: BookReviewWhereUniqueInput!): BookReview
  updateBookCategory(data: BookCategoryUpdateInput!, where: BookCategoryWhereUniqueInput!): BookCategory
  updateDiscount(data: DiscountUpdateInput!, where: DiscountWhereUniqueInput!): Discount
  updatePublisher(data: PublisherUpdateInput!, where: PublisherWhereUniqueInput!): Publisher
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateUserAddress(data: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress
  updatePaymentMethod(data: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteUserEvent(where: UserEventWhereUniqueInput!): UserEvent
  deleteBookReview(where: BookReviewWhereUniqueInput!): BookReview
  deleteBookCategory(where: BookCategoryWhereUniqueInput!): BookCategory
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCollection(where: CollectionWhereUniqueInput!, create: CollectionCreateInput!, update: CollectionUpdateInput!): Collection!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertOrderItem(where: OrderItemWhereUniqueInput!, create: OrderItemCreateInput!, update: OrderItemUpdateInput!): OrderItem!
  upsertUserEvent(where: UserEventWhereUniqueInput!, create: UserEventCreateInput!, update: UserEventUpdateInput!): UserEvent!
  upsertBookReview(where: BookReviewWhereUniqueInput!, create: BookReviewCreateInput!, update: BookReviewUpdateInput!): BookReview!
  upsertBookCategory(where: BookCategoryWhereUniqueInput!, create: BookCategoryCreateInput!, update: BookCategoryUpdateInput!): BookCategory!
  upsertDiscount(where: DiscountWhereUniqueInput!, create: DiscountCreateInput!, update: DiscountUpdateInput!): Discount!
  upsertPublisher(where: PublisherWhereUniqueInput!, create: PublisherCreateInput!, update: PublisherUpdateInput!): Publisher!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertUserAddress(where: UserAddressWhereUniqueInput!, create: UserAddressCreateInput!, update: UserAddressUpdateInput!): UserAddress!
  upsertPaymentMethod(where: PaymentMethodWhereUniqueInput!, create: PaymentMethodCreateInput!, update: PaymentMethodUpdateInput!): PaymentMethod!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCollections(data: CollectionUpdateManyMutationInput!, where: CollectionWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyUserEvents(data: UserEventUpdateManyMutationInput!, where: UserEventWhereInput): BatchPayload!
  updateManyBookReviews(data: BookReviewUpdateManyMutationInput!, where: BookReviewWhereInput): BatchPayload!
  updateManyBookCategories(data: BookCategoryUpdateManyMutationInput!, where: BookCategoryWhereInput): BatchPayload!
  updateManyDiscounts(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  updateManyPublishers(data: PublisherUpdateManyMutationInput!, where: PublisherWhereInput): BatchPayload!
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyUserAddresses(data: UserAddressUpdateManyMutationInput!, where: UserAddressWhereInput): BatchPayload!
  updateManyPaymentMethods(data: PaymentMethodUpdateManyMutationInput!, where: PaymentMethodWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCollections(where: CollectionWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyUserEvents(where: UserEventWhereInput): BatchPayload!
  deleteManyBookReviews(where: BookReviewWhereInput): BatchPayload!
  deleteManyBookCategories(where: BookCategoryWhereInput): BatchPayload!
  deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
  deleteManyPublishers(where: PublisherWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyUserAddresses(where: UserAddressWhereInput): BatchPayload!
  deleteManyPaymentMethods(where: PaymentMethodWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  customer: User!
  shippingAddress: UserAddress!
  paymentMethod: PaymentMethod!
  deliveryStatus: Boolean!
  paymentStatus: Boolean!
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  deliveryStatus: Boolean!
  paymentStatus: Boolean!
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  customer: UserCreateOneWithoutOrdersInput!
  shippingAddress: UserAddressCreateOneInput!
  paymentMethod: PaymentMethodCreateOneInput!
  items: OrderItemCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCustomerInput {
  id: ID
  deliveryStatus: Boolean!
  paymentStatus: Boolean!
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  shippingAddress: UserAddressCreateOneInput!
  paymentMethod: PaymentMethodCreateOneInput!
  items: OrderItemCreateManyWithoutOrderInput
}

input OrderCreateWithoutItemsInput {
  id: ID
  deliveryStatus: Boolean!
  paymentStatus: Boolean!
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  customer: UserCreateOneWithoutOrdersInput!
  shippingAddress: UserAddressCreateOneInput!
  paymentMethod: PaymentMethodCreateOneInput!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  order: Order!
  item: Book!
  price: Float!
  quantity: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type OrderItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  id: ID
  price: Float!
  quantity: Int!
  order: OrderCreateOneWithoutItemsInput!
  item: BookCreateOneInput!
}

input OrderItemCreateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateWithoutOrderInput {
  id: ID
  price: Float!
  quantity: Int!
  item: BookCreateOneInput!
}

"""An edge in a connection."""
type OrderItemEdge {
  """The item at the end of the edge."""
  node: OrderItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderItemPreviousValues {
  id: ID!
  price: Float!
  quantity: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
}

input OrderItemUpdateInput {
  price: Float
  quantity: Int
  order: OrderUpdateOneRequiredWithoutItemsInput
  item: BookUpdateOneRequiredInput
}

input OrderItemUpdateManyDataInput {
  price: Float
  quantity: Int
}

input OrderItemUpdateManyMutationInput {
  price: Float
  quantity: Int
}

input OrderItemUpdateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  delete: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemUpdateWithoutOrderDataInput {
  price: Float
  quantity: Int
  item: BookUpdateOneRequiredInput
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutOrderDataInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  create: OrderItemCreateWithoutOrderInput!
}

input OrderItemWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  order: OrderWhereInput
  item: BookWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  deliveryStatus_ASC
  deliveryStatus_DESC
  paymentStatus_ASC
  paymentStatus_DESC
  receivedDate_ASC
  receivedDate_DESC
  beginDeliveryDate_ASC
  beginDeliveryDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  deliveryStatus: Boolean!
  paymentStatus: Boolean!
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deliveryStatus: Boolean

  """All values that are not equal to given value."""
  deliveryStatus_not: Boolean
  paymentStatus: Boolean

  """All values that are not equal to given value."""
  paymentStatus_not: Boolean
  receivedDate: DateTime

  """All values that are not equal to given value."""
  receivedDate_not: DateTime

  """All values that are contained in given list."""
  receivedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  receivedDate_not_in: [DateTime!]

  """All values less than the given value."""
  receivedDate_lt: DateTime

  """All values less than or equal the given value."""
  receivedDate_lte: DateTime

  """All values greater than the given value."""
  receivedDate_gt: DateTime

  """All values greater than or equal the given value."""
  receivedDate_gte: DateTime
  beginDeliveryDate: DateTime

  """All values that are not equal to given value."""
  beginDeliveryDate_not: DateTime

  """All values that are contained in given list."""
  beginDeliveryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  beginDeliveryDate_not_in: [DateTime!]

  """All values less than the given value."""
  beginDeliveryDate_lt: DateTime

  """All values less than or equal the given value."""
  beginDeliveryDate_lte: DateTime

  """All values greater than the given value."""
  beginDeliveryDate_gt: DateTime

  """All values greater than or equal the given value."""
  beginDeliveryDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  deliveryStatus: Boolean
  paymentStatus: Boolean
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  customer: UserUpdateOneRequiredWithoutOrdersInput
  shippingAddress: UserAddressUpdateOneRequiredInput
  paymentMethod: PaymentMethodUpdateOneRequiredInput
  items: OrderItemUpdateManyWithoutOrderInput
}

input OrderUpdateManyDataInput {
  deliveryStatus: Boolean
  paymentStatus: Boolean
  receivedDate: DateTime
  beginDeliveryDate: DateTime
}

input OrderUpdateManyMutationInput {
  deliveryStatus: Boolean
  paymentStatus: Boolean
  receivedDate: DateTime
  beginDeliveryDate: DateTime
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneRequiredWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
}

input OrderUpdateWithoutCustomerDataInput {
  deliveryStatus: Boolean
  paymentStatus: Boolean
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  shippingAddress: UserAddressUpdateOneRequiredInput
  paymentMethod: PaymentMethodUpdateOneRequiredInput
  items: OrderItemUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutItemsDataInput {
  deliveryStatus: Boolean
  paymentStatus: Boolean
  receivedDate: DateTime
  beginDeliveryDate: DateTime
  customer: UserUpdateOneRequiredWithoutOrdersInput
  shippingAddress: UserAddressUpdateOneRequiredInput
  paymentMethod: PaymentMethodUpdateOneRequiredInput
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput!
  create: OrderCreateWithoutItemsInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deliveryStatus: Boolean

  """All values that are not equal to given value."""
  deliveryStatus_not: Boolean
  paymentStatus: Boolean

  """All values that are not equal to given value."""
  paymentStatus_not: Boolean
  receivedDate: DateTime

  """All values that are not equal to given value."""
  receivedDate_not: DateTime

  """All values that are contained in given list."""
  receivedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  receivedDate_not_in: [DateTime!]

  """All values less than the given value."""
  receivedDate_lt: DateTime

  """All values less than or equal the given value."""
  receivedDate_lte: DateTime

  """All values greater than the given value."""
  receivedDate_gt: DateTime

  """All values greater than or equal the given value."""
  receivedDate_gte: DateTime
  beginDeliveryDate: DateTime

  """All values that are not equal to given value."""
  beginDeliveryDate_not: DateTime

  """All values that are contained in given list."""
  beginDeliveryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  beginDeliveryDate_not_in: [DateTime!]

  """All values less than the given value."""
  beginDeliveryDate_lt: DateTime

  """All values less than or equal the given value."""
  beginDeliveryDate_lte: DateTime

  """All values greater than the given value."""
  beginDeliveryDate_gt: DateTime

  """All values greater than or equal the given value."""
  beginDeliveryDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  customer: UserWhereInput
  shippingAddress: UserAddressWhereInput
  paymentMethod: PaymentMethodWhereInput
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentMethod implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PaymentMethodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentMethodEdge]!
  aggregate: AggregatePaymentMethod!
}

input PaymentMethodCreateInput {
  id: ID
  name: String!
}

input PaymentMethodCreateOneInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
}

"""An edge in a connection."""
type PaymentMethodEdge {
  """The item at the end of the edge."""
  node: PaymentMethod!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentMethodOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentMethodPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentMethodSubscriptionPayload {
  mutation: MutationType!
  node: PaymentMethod
  updatedFields: [String!]
  previousValues: PaymentMethodPreviousValues
}

input PaymentMethodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentMethodSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentMethodSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentMethodSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentMethodWhereInput
}

input PaymentMethodUpdateDataInput {
  name: String
}

input PaymentMethodUpdateInput {
  name: String
}

input PaymentMethodUpdateManyMutationInput {
  name: String
}

input PaymentMethodUpdateOneRequiredInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
  update: PaymentMethodUpdateDataInput
  upsert: PaymentMethodUpsertNestedInput
}

input PaymentMethodUpsertNestedInput {
  update: PaymentMethodUpdateDataInput!
  create: PaymentMethodCreateInput!
}

input PaymentMethodWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentMethodWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentMethodWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentMethodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PaymentMethodWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Publisher implements Node {
  id: ID!
  name: String!
  description: String
  image: String
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PublisherConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PublisherEdge]!
  aggregate: AggregatePublisher!
}

input PublisherCreateInput {
  id: ID
  name: String!
  description: String
  image: String
  books: BookCreateManyWithoutPublisherInput
}

input PublisherCreateOneWithoutBooksInput {
  create: PublisherCreateWithoutBooksInput
  connect: PublisherWhereUniqueInput
}

input PublisherCreateWithoutBooksInput {
  id: ID
  name: String!
  description: String
  image: String
}

"""An edge in a connection."""
type PublisherEdge {
  """The item at the end of the edge."""
  node: Publisher!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PublisherOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PublisherPreviousValues {
  id: ID!
  name: String!
  description: String
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PublisherSubscriptionPayload {
  mutation: MutationType!
  node: Publisher
  updatedFields: [String!]
  previousValues: PublisherPreviousValues
}

input PublisherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PublisherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PublisherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PublisherSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PublisherWhereInput
}

input PublisherUpdateInput {
  name: String
  description: String
  image: String
  books: BookUpdateManyWithoutPublisherInput
}

input PublisherUpdateManyMutationInput {
  name: String
  description: String
  image: String
}

input PublisherUpdateOneRequiredWithoutBooksInput {
  create: PublisherCreateWithoutBooksInput
  connect: PublisherWhereUniqueInput
  update: PublisherUpdateWithoutBooksDataInput
  upsert: PublisherUpsertWithoutBooksInput
}

input PublisherUpdateWithoutBooksDataInput {
  name: String
  description: String
  image: String
}

input PublisherUpsertWithoutBooksInput {
  update: PublisherUpdateWithoutBooksDataInput!
  create: PublisherCreateWithoutBooksInput!
}

input PublisherWhereInput {
  """Logical AND on all given filters."""
  AND: [PublisherWhereInput!]

  """Logical OR on all given filters."""
  OR: [PublisherWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PublisherWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input PublisherWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  collections(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Collection]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  userEvents(where: UserEventWhereInput, orderBy: UserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserEvent]!
  bookReviews(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookReview]!
  bookCategories(where: BookCategoryWhereInput, orderBy: BookCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookCategory]!
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount]!
  publishers(where: PublisherWhereInput, orderBy: PublisherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Publisher]!
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  userAddresses(where: UserAddressWhereInput, orderBy: UserAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAddress]!
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod]!
  user(where: UserWhereUniqueInput!): User
  collection(where: CollectionWhereUniqueInput!): Collection
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  userEvent(where: UserEventWhereUniqueInput!): UserEvent
  bookReview(where: BookReviewWhereUniqueInput!): BookReview
  bookCategory(where: BookCategoryWhereUniqueInput!): BookCategory
  discount(where: DiscountWhereUniqueInput!): Discount
  publisher(where: PublisherWhereUniqueInput!): Publisher
  author(where: AuthorWhereUniqueInput!): Author
  book(where: BookWhereUniqueInput!): Book
  userAddress(where: UserAddressWhereUniqueInput!): UserAddress
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  collectionsConnection(where: CollectionWhereInput, orderBy: CollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CollectionConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  userEventsConnection(where: UserEventWhereInput, orderBy: UserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserEventConnection!
  bookReviewsConnection(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookReviewConnection!
  bookCategoriesConnection(where: BookCategoryWhereInput, orderBy: BookCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookCategoryConnection!
  discountsConnection(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountConnection!
  publishersConnection(where: PublisherWhereInput, orderBy: PublisherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PublisherConnection!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  userAddressesConnection(where: UserAddressWhereInput, orderBy: UserAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAddressConnection!
  paymentMethodsConnection(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentMethodConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  collection(where: CollectionSubscriptionWhereInput): CollectionSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  userEvent(where: UserEventSubscriptionWhereInput): UserEventSubscriptionPayload
  bookReview(where: BookReviewSubscriptionWhereInput): BookReviewSubscriptionPayload
  bookCategory(where: BookCategorySubscriptionWhereInput): BookCategorySubscriptionPayload
  discount(where: DiscountSubscriptionWhereInput): DiscountSubscriptionPayload
  publisher(where: PublisherSubscriptionWhereInput): PublisherSubscriptionPayload
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  userAddress(where: UserAddressSubscriptionWhereInput): UserAddressSubscriptionPayload
  paymentMethod(where: PaymentMethodSubscriptionWhereInput): PaymentMethodSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole!
  receiveEmailNotification: Boolean!
  addresses(where: UserAddressWhereInput, orderBy: UserAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAddress!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  userEvents(where: UserEventWhereInput, orderBy: UserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserEvent!]
  reviews(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookReview!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAddress implements Node {
  id: ID!
  user: User!
  address: String!
  phone: String!
  fullName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserAddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAddressEdge]!
  aggregate: AggregateUserAddress!
}

input UserAddressCreateInput {
  id: ID
  address: String!
  phone: String!
  fullName: String!
  user: UserCreateOneWithoutAddressesInput!
}

input UserAddressCreateManyWithoutUserInput {
  create: [UserAddressCreateWithoutUserInput!]
  connect: [UserAddressWhereUniqueInput!]
}

input UserAddressCreateOneInput {
  create: UserAddressCreateInput
  connect: UserAddressWhereUniqueInput
}

input UserAddressCreateWithoutUserInput {
  id: ID
  address: String!
  phone: String!
  fullName: String!
}

"""An edge in a connection."""
type UserAddressEdge {
  """The item at the end of the edge."""
  node: UserAddress!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAddressOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  phone_ASC
  phone_DESC
  fullName_ASC
  fullName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserAddressPreviousValues {
  id: ID!
  address: String!
  phone: String!
  fullName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserAddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserAddressSubscriptionPayload {
  mutation: MutationType!
  node: UserAddress
  updatedFields: [String!]
  previousValues: UserAddressPreviousValues
}

input UserAddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserAddressWhereInput
}

input UserAddressUpdateDataInput {
  address: String
  phone: String
  fullName: String
  user: UserUpdateOneRequiredWithoutAddressesInput
}

input UserAddressUpdateInput {
  address: String
  phone: String
  fullName: String
  user: UserUpdateOneRequiredWithoutAddressesInput
}

input UserAddressUpdateManyDataInput {
  address: String
  phone: String
  fullName: String
}

input UserAddressUpdateManyMutationInput {
  address: String
  phone: String
  fullName: String
}

input UserAddressUpdateManyWithoutUserInput {
  create: [UserAddressCreateWithoutUserInput!]
  connect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  disconnect: [UserAddressWhereUniqueInput!]
  delete: [UserAddressWhereUniqueInput!]
  update: [UserAddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserAddressUpdateManyWithWhereNestedInput!]
  deleteMany: [UserAddressScalarWhereInput!]
  upsert: [UserAddressUpsertWithWhereUniqueWithoutUserInput!]
}

input UserAddressUpdateManyWithWhereNestedInput {
  where: UserAddressScalarWhereInput!
  data: UserAddressUpdateManyDataInput!
}

input UserAddressUpdateOneRequiredInput {
  create: UserAddressCreateInput
  connect: UserAddressWhereUniqueInput
  update: UserAddressUpdateDataInput
  upsert: UserAddressUpsertNestedInput
}

input UserAddressUpdateWithoutUserDataInput {
  address: String
  phone: String
  fullName: String
}

input UserAddressUpdateWithWhereUniqueWithoutUserInput {
  where: UserAddressWhereUniqueInput!
  data: UserAddressUpdateWithoutUserDataInput!
}

input UserAddressUpsertNestedInput {
  update: UserAddressUpdateDataInput!
  create: UserAddressCreateInput!
}

input UserAddressUpsertWithWhereUniqueWithoutUserInput {
  where: UserAddressWhereUniqueInput!
  update: UserAddressUpdateWithoutUserDataInput!
  create: UserAddressCreateWithoutUserInput!
}

input UserAddressWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input UserAddressWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole
  receiveEmailNotification: Boolean!
  addresses: UserAddressCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCustomerInput
  userEvents: UserEventCreateManyWithoutUserInput
  reviews: BookReviewCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserEventsInput {
  create: UserCreateWithoutUserEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressesInput {
  id: ID
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole
  receiveEmailNotification: Boolean!
  orders: OrderCreateManyWithoutCustomerInput
  userEvents: UserEventCreateManyWithoutUserInput
  reviews: BookReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutOrdersInput {
  id: ID
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole
  receiveEmailNotification: Boolean!
  addresses: UserAddressCreateManyWithoutUserInput
  userEvents: UserEventCreateManyWithoutUserInput
  reviews: BookReviewCreateManyWithoutAuthorInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole
  receiveEmailNotification: Boolean!
  addresses: UserAddressCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCustomerInput
  userEvents: UserEventCreateManyWithoutUserInput
}

input UserCreateWithoutUserEventsInput {
  id: ID
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole
  receiveEmailNotification: Boolean!
  addresses: UserAddressCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutCustomerInput
  reviews: BookReviewCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserEvent implements Node {
  id: ID!
  user: User!
  type: UserEventType!
  eventDetail: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserEventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEventEdge]!
  aggregate: AggregateUserEvent!
}

input UserEventCreateInput {
  id: ID
  type: UserEventType!
  eventDetail: String!
  user: UserCreateOneWithoutUserEventsInput!
}

input UserEventCreateManyWithoutUserInput {
  create: [UserEventCreateWithoutUserInput!]
  connect: [UserEventWhereUniqueInput!]
}

input UserEventCreateWithoutUserInput {
  id: ID
  type: UserEventType!
  eventDetail: String!
}

"""An edge in a connection."""
type UserEventEdge {
  """The item at the end of the edge."""
  node: UserEvent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserEventOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  eventDetail_ASC
  eventDetail_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserEventPreviousValues {
  id: ID!
  type: UserEventType!
  eventDetail: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserEventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserEventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserEventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserEventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: UserEventType

  """All values that are not equal to given value."""
  type_not: UserEventType

  """All values that are contained in given list."""
  type_in: [UserEventType!]

  """All values that are not contained in given list."""
  type_not_in: [UserEventType!]
  eventDetail: String

  """All values that are not equal to given value."""
  eventDetail_not: String

  """All values that are contained in given list."""
  eventDetail_in: [String!]

  """All values that are not contained in given list."""
  eventDetail_not_in: [String!]

  """All values less than the given value."""
  eventDetail_lt: String

  """All values less than or equal the given value."""
  eventDetail_lte: String

  """All values greater than the given value."""
  eventDetail_gt: String

  """All values greater than or equal the given value."""
  eventDetail_gte: String

  """All values containing the given string."""
  eventDetail_contains: String

  """All values not containing the given string."""
  eventDetail_not_contains: String

  """All values starting with the given string."""
  eventDetail_starts_with: String

  """All values not starting with the given string."""
  eventDetail_not_starts_with: String

  """All values ending with the given string."""
  eventDetail_ends_with: String

  """All values not ending with the given string."""
  eventDetail_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserEventSubscriptionPayload {
  mutation: MutationType!
  node: UserEvent
  updatedFields: [String!]
  previousValues: UserEventPreviousValues
}

input UserEventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserEventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserEventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserEventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserEventWhereInput
}

enum UserEventType {
  View
  Comment
  Review
  Order
}

input UserEventUpdateInput {
  type: UserEventType
  eventDetail: String
  user: UserUpdateOneRequiredWithoutUserEventsInput
}

input UserEventUpdateManyDataInput {
  type: UserEventType
  eventDetail: String
}

input UserEventUpdateManyMutationInput {
  type: UserEventType
  eventDetail: String
}

input UserEventUpdateManyWithoutUserInput {
  create: [UserEventCreateWithoutUserInput!]
  connect: [UserEventWhereUniqueInput!]
  set: [UserEventWhereUniqueInput!]
  disconnect: [UserEventWhereUniqueInput!]
  delete: [UserEventWhereUniqueInput!]
  update: [UserEventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserEventUpdateManyWithWhereNestedInput!]
  deleteMany: [UserEventScalarWhereInput!]
  upsert: [UserEventUpsertWithWhereUniqueWithoutUserInput!]
}

input UserEventUpdateManyWithWhereNestedInput {
  where: UserEventScalarWhereInput!
  data: UserEventUpdateManyDataInput!
}

input UserEventUpdateWithoutUserDataInput {
  type: UserEventType
  eventDetail: String
}

input UserEventUpdateWithWhereUniqueWithoutUserInput {
  where: UserEventWhereUniqueInput!
  data: UserEventUpdateWithoutUserDataInput!
}

input UserEventUpsertWithWhereUniqueWithoutUserInput {
  where: UserEventWhereUniqueInput!
  update: UserEventUpdateWithoutUserDataInput!
  create: UserEventCreateWithoutUserInput!
}

input UserEventWhereInput {
  """Logical AND on all given filters."""
  AND: [UserEventWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserEventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserEventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: UserEventType

  """All values that are not equal to given value."""
  type_not: UserEventType

  """All values that are contained in given list."""
  type_in: [UserEventType!]

  """All values that are not contained in given list."""
  type_not_in: [UserEventType!]
  eventDetail: String

  """All values that are not equal to given value."""
  eventDetail_not: String

  """All values that are contained in given list."""
  eventDetail_in: [String!]

  """All values that are not contained in given list."""
  eventDetail_not_in: [String!]

  """All values less than the given value."""
  eventDetail_lt: String

  """All values less than or equal the given value."""
  eventDetail_lte: String

  """All values greater than the given value."""
  eventDetail_gt: String

  """All values greater than or equal the given value."""
  eventDetail_gte: String

  """All values containing the given string."""
  eventDetail_contains: String

  """All values not containing the given string."""
  eventDetail_not_contains: String

  """All values starting with the given string."""
  eventDetail_starts_with: String

  """All values not starting with the given string."""
  eventDetail_not_starts_with: String

  """All values ending with the given string."""
  eventDetail_ends_with: String

  """All values not ending with the given string."""
  eventDetail_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input UserEventWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  fullName_ASC
  fullName_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  avatar_ASC
  avatar_DESC
  gender_ASC
  gender_DESC
  birthdate_ASC
  birthdate_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  receiveEmailNotification_ASC
  receiveEmailNotification_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  fullName: String
  email: String!
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String!
  role: UserRole!
  receiveEmailNotification: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  User
  Admin
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
  addresses: UserAddressUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCustomerInput
  userEvents: UserEventUpdateManyWithoutUserInput
  reviews: BookReviewUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
}

input UserUpdateOneRequiredWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutUserEventsInput {
  create: UserCreateWithoutUserEventsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserEventsDataInput
  upsert: UserUpsertWithoutUserEventsInput
}

input UserUpdateWithoutAddressesDataInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
  orders: OrderUpdateManyWithoutCustomerInput
  userEvents: UserEventUpdateManyWithoutUserInput
  reviews: BookReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutOrdersDataInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
  addresses: UserAddressUpdateManyWithoutUserInput
  userEvents: UserEventUpdateManyWithoutUserInput
  reviews: BookReviewUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReviewsDataInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
  addresses: UserAddressUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCustomerInput
  userEvents: UserEventUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserEventsDataInput {
  username: String
  fullName: String
  email: String
  phone: String
  avatar: String
  gender: Boolean
  birthdate: DateTime
  password: String
  role: UserRole
  receiveEmailNotification: Boolean
  addresses: UserAddressUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: BookReviewUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput!
  create: UserCreateWithoutAddressesInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutUserEventsInput {
  update: UserUpdateWithoutUserEventsDataInput!
  create: UserCreateWithoutUserEventsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  gender: Boolean

  """All values that are not equal to given value."""
  gender_not: Boolean
  birthdate: DateTime

  """All values that are not equal to given value."""
  birthdate_not: DateTime

  """All values that are contained in given list."""
  birthdate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthdate_not_in: [DateTime!]

  """All values less than the given value."""
  birthdate_lt: DateTime

  """All values less than or equal the given value."""
  birthdate_lte: DateTime

  """All values greater than the given value."""
  birthdate_gt: DateTime

  """All values greater than or equal the given value."""
  birthdate_gte: DateTime
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  receiveEmailNotification: Boolean

  """All values that are not equal to given value."""
  receiveEmailNotification_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  addresses_every: UserAddressWhereInput
  addresses_some: UserAddressWhereInput
  addresses_none: UserAddressWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  userEvents_every: UserEventWhereInput
  userEvents_some: UserEventWhereInput
  userEvents_none: UserEventWhereInput
  reviews_every: BookReviewWhereInput
  reviews_some: BookReviewWhereInput
  reviews_none: BookReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phone: String
}
