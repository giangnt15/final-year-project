type User{
    id: ID!
    username: String!
    fullName: String!
    email: String!
    phone: String
    gender: Boolean
    birthdate: String
    password: String!
    role: UserRole!
    receiveEmailNotification: Boolean!
    addresses: [UserAddress!]!
    orders: [Order!]!
    userEvents: [UserEvent!]!
    reviews: [BookReview!]!
    createdAt: String!
    updatedAt: String!
}

# type Cart{
#     id!: ID!
#     customer: User!
#     items: [Book!]!
# }

# type CartItem{
#     id: ID!
#     item: Book!
#     quantity: Int!
#     price: Float! 
# }

type Order{
    id: ID!
    customer: User!
    shippingAddress: UserAddress!
    paymentMethod: PaymentMethod!
    deliveryStatus: Boolean!
    paymentStatus: Boolean!
    items: [OrderItem!]!
    receivedDate: String!
    beginDeliveryDate: String!
    createdAt: String!
    updatedAt: String!
}

type PaymentMethod{
    id: ID!
    name: String!
}

type OrderItem{
    id: ID!
    order: Order!
    item: Book!
    price: Float!
    quantity: Int!
}

type UserEvent{
    id: ID!
    user: User!
    type: UserEventType!
    eventDetail: String!
    createdAt: String!
    updatedAt: String!
}

type UserAddress{
    id: ID!
    user: User!
    address: String!
    phone: String!
    fullName: String!
}

type Book{
    id: ID!
    title: String!
    description: String
    categories: [BookCategory!]!
    authors: [Author!]!
    reviews: [BookReview!]!
    isbn: String!
    format: BookFormat!
    dimensions: String
    publishedDate: String
    publisher: Publisher!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String
    discounts: [Discount!]!
}

type BookReview{
    id: ID!
    reviewHeader: String
    reviewText: String
    rating: Int!
    author: User!
    book: Book!
}

type BookCategory{
    id: ID!
    name: String!
    books: [Book!]!
}

type Discount{
    id: ID!
    reason: String
    discountRate: Float
    from: String
    to: String
    appliedTo: [Book!]!
}

type Publisher{
    id: ID!
    name: String!
    description: String
    image: String
    books: [Book!]!
}

type Author{
    id: ID!
    realName: String
    pseudonym: String
    image: String
    description: String
    books: [Book!]!
}

enum BookFormat{
    HardCover
    PaperBack
}

enum UserEventType{
    View
    Comment
    Review
    Order
}

enum UserRole{
    User
    Admin
}

type Query{
    getBooks(name: String, authorName: String): [Book!]!
    getCategories: [BookCategory!]!
}

type Mutation{
    signUp(data: UserSignupInput!): AuthPayload!
    login(data: UserLoginInput!): AuthPayload!
    createBook(data: BookCreateInput!): Book!
    updateBook(data: BookUpdateInput!): Book!
}

type Subscription{
    user: User!
}

type AuthPayload{
    user: User!
    token: String!
}

input BookUpdateInput{
    title: String
    description: String
    categories: [ID!]
    authors: [ID!]
    isbn: String
    format: BookFormat
    dimensions: String
    publishedDate: String
    publisher: ID
    availableCopies: Int
    basePrice: Float
    pages: Int
    thumbnail: String
    images: String
}

input BookCreateInput{
    title: String!
    description: String
    categories: [ID!]!
    authors: [ID!]!
    isbn: String!
    format: BookFormat!
    dimensions: String
    publishedDate: String
    publisher: ID!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String!
}

input UserLoginInput{
    email: String!
    password: String!
}

input UserSignupInput{
    username: String!
    password: String!
    email: String!
    phone: String
    gender: Boolean
    birthdate: String
    receiveEmailNotification: Boolean!
}