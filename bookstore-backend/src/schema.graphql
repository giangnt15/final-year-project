#import AuthorOrderByInput, CollectionOrderByInput, UserAddressOrderByInput from './generated/prisma.graphql'
#import BookOrderByInput, BookReviewOrderByInput, BookCategoryOrderByInput,BookCategoryWhereInput  from './generated/prisma.graphql'
#import BookWhereInput, PublisherWhereInput, PublisherOrderByInput, AuthorWhereInput from './generated/prisma.graphql';

type User{
    id: ID!
    username: String!
    fullName: String
    email: String!
    phone: String
    gender: Boolean
    avatar: String
    birthdate: String
    password: String!
    role: UserRole!
    receiveEmailNotification: Boolean!
    addresses: [UserAddress!]!
    orders: [Order!]!
    userEvents: [UserEvent!]!
    reviews: [BookReview!]!
    createdAt: String!
    updatedAt: String!
}

type Collection{
    id: ID! 
    collectionName: String!
    description: String
    thumbnail: String!
    cover: String!
    books: [Book!]!
    createdAt: String!
    updatedAt: String! 
}

# type Cart{
#     id!: ID!
#     customer: User!
#     items: [Book!]!
# }

# type CartItem{
#     id: ID!
#     item: Book!
#     quantity: Int!
#     price: Float! 
# }

type Order{
    id: ID!
    customer: User!
    shippingAddress: UserAddress!
    paymentMethod: PaymentMethod!
    deliveryStatus: Boolean!
    paymentStatus: Boolean!
    items: [OrderItem!]!
    receivedDate: String!
    beginDeliveryDate: String!
    createdAt: String!
    updatedAt: String!
}

type PaymentMethod{
    id: ID!
    name: String!
}

type OrderItem{
    id: ID!
    order: Order!
    item: Book!
    price: Float!
    quantity: Int!
}

type UserEvent{
    id: ID!
    user: User!
    type: UserEventType!
    eventDetail: String!
    createdAt: String!
    updatedAt: String!
}

type UserAddress{
    id: ID!
    user: User!
    address: String!
    phone: String!
    fullName: String!
}

type Book{
    id: ID!
    title: String!
    description: String
    categories: [BookCategory!]!
    authors: [Author!]!
    reviews: [BookReview!]!
    isbn: String!
    format: BookFormat!
    dimensions: String
    translator: String
    publishedDate: String
    collections: [Collection!]!
    publisher: Publisher!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String
    discounts: [Discount!]!
}

type BookReview{
    id: ID!
    reviewHeader: String
    reviewText: String
    rating: Int!
    author: User!
    book: Book!
    createdAt: String!
    updatedAt: String!
}

type BookCategory{
    id: ID!
    name: String!
    books(where: BookWhereInput): [Book!]!
}

type Discount{
    id: ID!
    reason: String
    discountRate: Float
    from: String
    to: String
    appliedTo: [Book!]!
}

type Publisher{
    id: ID!
    name: String!
    description: String
    image: String
    books(where: BookWhereInput): [Book!]!
}

type Author{
    id: ID!
    realName: String
    pseudonym: String
    image: String
    description: String
    books(where: BookWhereInput): [Book!]!
}

enum BookFormat{
    HardCover
    PaperBack
}

enum UserEventType{
    View
    Comment
    Review
    Order
}

enum UserRole{
    User
    Admin
}

type Query{
    getBooks(where: BookWhereInput,orderBy: BookOrderByInput, first: Int, skip:Int, selection: String): BooksPayload!
    getBook(id: ID!): Book!
    getCategories(where: BookCategoryWhereInput, orderBy: BookCategoryOrderByInput, first: Int, skip: Int): [BookCategory!]!
    getCategory(id: ID!): BookCategory!
    getAuthors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, first: Int, skip: Int): [Author!]!
    getAuthor(id: ID!): Author!
    getCollections(name: String, orderBy: CollectionOrderByInput, first: Int,skip: Int): [Collection!]!
    getCollection(id: ID!): Collection!
    getBookReviewsByBook(bookId: ID, orderBy: BookReviewOrderByInput, first: Int,skip: Int): GetBookReviewsByBookPayload!
    getUserAddresses: [UserAddress!]!
    getPublishers(where: PublisherWhereInput, orderBy: PublisherOrderByInput, first: Int, skip: Int): [Publisher!]!
}

type Mutation{
    signUp(data: UserSignupInput!): AuthPayload!
    login(data: UserLoginInput!): AuthPayload!
    updateUser(data: CustomUserUpdateInput!): User!
    createBook(data: BookCreateInput!): Book!
    updateBook(id: ID!, data: BookUpdateInput!): Book!
    createCollection(data: CollectionCreateInput!): Collection!
    updateCollection(id: ID!, data: CollectionUpdateInput!): Collection!
    createUserAddress(data: UserAddressCreateInput!): UserAddress!
    updateUserAddress(id: ID!,data: UserAddressUpdateInput!): UserAddress!
    createBookReview(data: BookReviewCreateInput!): BookReview!
    updateBookReview(id: ID!,data: BookReviewUpdateInput!): BookReview!
    createBookCategory(data: BookCategoryCreateInput!): BookCategory!
    updateBookCategory(id: ID!,data: BookCategoryUpdateInput!): BookCategory!
    createPublisher(data: PublisherCreateInput!): Publisher!
    updatePublisher(id: ID!,data: PublisherUpdateInput!): Publisher!
    createAuthor(data: AuthorCreateInput!): Author!
    updateAuthor(id: ID!,data: AuthorCreateInput!): Author!
}

type Subscription{
    user: User!
}

type GetBookReviewsByBookPayload{
    bookReviews: [BookReview!]!
    totalCount: Int
    avgScore: Float
    fiveStar: Int
    fourStar: Int
    threeStar: Int
    twoStar: Int
    oneStar: Int
}

type BooksPayload{
    books: [Book!]!
    totalCount: Int
}

type AuthPayload{
    user: User!
    token: String!
}

input AuthorCreateInput{
    realName: String
    pseudonym: String
    image: String
    description: String
}

input PublisherCreateInput{
    name: String!
    description: String
    image: String
}

input PublisherUpdateInput{
    name: String
    description: String
    image: String
}

input BookCategoryCreateInput{
    name: String!
}

input BookCategoryUpdateInput{
    name: String
}

input BookReviewCreateInput{
    book: ID!
    reviewHeader: String
    reviewText: String
    rating: Int!
}

input BookReviewUpdateInput{
    book: ID!
    reviewHeader: String
    reviewText: String
    rating: Int
}

input UserAddressCreateInput{
    address: String!
    phone: String!
    fullName: String!
}

input UserAddressUpdateInput{
    address: String
    phone: String
    fullName: String
}

input CollectionUpdateInput{
    collectionName: String
    description: String
    thumbnail: String
    cover: String
}

input CollectionCreateInput{
    collectionName: String!
    description: String
    thumbnail: String!
    cover: String!
}

input CustomUserUpdateInput{
    fullName: String
    changePassword: Boolean
    phone: String
    gender: Boolean
    birthdate: String
    password: String
    currentPassword: String
}

input BookUpdateInput{
    title: String
    description: String
    categories: [ID!]
    authors: [ID!]
    isbn: String
    format: BookFormat
    translator: String
    dimensions: String
    publishedDate: String
    publisher: ID
    availableCopies: Int
    basePrice: Float
    pages: Int
    thumbnail: String
    images: String
}

input BookCreateInput{
    title: String!
    description: String
    categories: [ID!]!
    translator: String
    authors: [ID!]!
    isbn: String!
    format: BookFormat!
    dimensions: String
    publishedDate: String
    publisher: ID!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String!
}

input UserLoginInput{
    email: String!
    password: String!
}

input UserSignupInput{
    username: String!
    password: String!
    fullName: String
    email: String!
    phone: String
    gender: Boolean
    birthdate: String
    receiveEmailNotification: Boolean
}